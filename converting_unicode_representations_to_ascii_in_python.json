[
  {
    "content": "\n# Python and Unicode\n\nOh, my - If I had a nickel/five-pence every time I had to deal with various kinds\nof Unicode-related processing in Python ...\n\nAnyway, this brief note is for those of you who've ever run into a not-so-helpful error message, along the lines of the following:\n```ipython\nUnicodeEncodeError: 'ascii' codec can't encode character u'\\xef' in position 2: ordinal not in range(128)\n```\n\nI'd bet those of you who have used Python for a bit larger than trivial project have invariably encountered\nsome variety of it.\n\nLet's see how we could approach this issue in different ways. For this purse, I'll first go\nahead and  define a\nsimple use-case: we're experimenting with a given dataset and we want to run a number of\nMachine Learning methods against the dataset and output a nice log file with performance\nsummary and results for each method.\n\nAs it turns out, not all ML method names were created equal, and for some of them\nwe need more characters than those defined in the basic ASCII table:\n\n```ipython\nIn [1]: method = u'Na\u00efve Bayes'\n\nIn [2]: method\nOut[2]: u'Na\\xefve Bayes'\n\n```\n\nSo far so good - Python has successfully been able to encode our special character\n`\u00ef` as `\\xef`. However, once we attempt to put that into a non-unicode string, all hell\nbreaks loose:\n```ipython\nIn [3]: method_filename = '{}_method.log'.format(method.replace(' ', '_'))\n---------------------------------------------------------------------------\nUnicodeEncodeError                        Traceback (most recent call last)\n<ipython-input-31-c5a4e402b551> in <module>()\n----> 1 method_filename = '{}_method.log'.format(method.replace(' ', '_'))\n\nUnicodeEncodeError: 'ascii' codec can't encode character u'\\xef' in position 2: ordinal not in range(128)\n```\n\nAt this point, we have a couple of options: ignore-and-remove the problematic character or\ntry to somehow convert it to an approximate representation that is part of the\nASCII character set. Let's explore the former option first:\n```ipython\nIn [4]: '{}_method.log'.format(method.replace(' ', '_').encode('ascii', 'ignore'))\nOut[4]: 'Nave_Bayes_method.log'\n\n```\nFair enough, it works and we get what we pay for it, but surely we could do better,\nright?\n\nAlternatively, if we're happy with non-ASCII file names occupying our file system, we\ncould just do:\n```ipython\nIn [5]: method_filename = u'{}_method.log'.format(method.replace(' ', '_'))\n\nIn [6]: method_filename\nOut[6]: u'Na\\xc3\\xafve_Bayes_method.log'\n\nIn [7]: print(method_filename)\nNa\u00efve_Bayes_method.log\n\n```\n\nHowever, that's not really the point of this exercise. Let's see if we could do even better.\n```ipython\nIn [8]: import unicodedata\n\nIn [9]: method_filename = '{}_method.log'.format(\n            unicodedata.normalize(\n                'NFKD', method.replace(' ', '_')).encode(\n                     'ascii', 'ignore'))\n\nIn [10]: method_filename\nOut[10]: 'Naive_Bayes_method.log'\n```\n\nThis is where the [`unicodedata`][unicodedata_module] module from the Python Standard\nLibrary comes to the rescue. In this case, either of the `NFD` or `NFKD` normalizations would work, as\ndescribed in the documentation:\n> [Canonical decomposition] translates each character into its decomposed form.\n\nThis is exactly what we needed, wasn't it? An equivalent ASCII representation of our fancy\nML method names.\n\nFinally, I would like to give credit to a StackOverflow [answer][stackoverflow_unicodedata], from which I\nlearned about the `unicodedata.normalize` functionality that gave rise to the current post.\n\nHappy debugging of `UnicodeError`s, everybody :)\n\n[unicodedata_module]: https://docs.python.org/2/library/unicodedata.html\n[stackoverflow_unicodedata]: https://stackoverflow.com/a/7782177\n", 
    "content_html": "<h1>Python and Unicode</h1>\n<p>Oh, my - If I had a nickel/five-pence every time I had to deal with various kinds\nof Unicode-related processing in Python ...</p>\n<p>Anyway, this brief note is for those of you who've ever run into a not-so-helpful error message, along the lines of the following:</p>\n<div class=\"codehilite\"><pre><span class=\"ne\">UnicodeEncodeError</span><span class=\"p\">:</span> <span class=\"s\">&#39;ascii&#39;</span> <span class=\"n\">codec</span> <span class=\"n\">can</span><span class=\"s\">&#39;t encode character u&#39;</span>\\<span class=\"n\">xef</span><span class=\"s\">&#39; in position 2: ordinal not in range(128)</span>\n</pre></div>\n\n\n<p>I'd bet those of you who have used Python for a bit larger than trivial project have invariably encountered\nsome variety of it.</p>\n<p>Let's see how we could approach this issue in different ways. For this purse, I'll first go\nahead and  define a\nsimple use-case: we're experimenting with a given dataset and we want to run a number of\nMachine Learning methods against the dataset and output a nice log file with performance\nsummary and results for each method.</p>\n<p>As it turns out, not all ML method names were created equal, and for some of them\nwe need more characters than those defined in the basic ASCII table:</p>\n<div class=\"codehilite\"><pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"n\">method</span> <span class=\"o\">=</span> <span class=\"s\">u&#39;Na\u00efve Bayes&#39;</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">method</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"s\">u&#39;Na</span><span class=\"se\">\\xef</span><span class=\"s\">ve Bayes&#39;</span>\n</pre></div>\n\n\n<p>So far so good - Python has successfully been able to encode our special character\n<code>\u00ef</code> as <code>\\xef</code>. However, once we attempt to put that into a non-unicode string, all hell\nbreaks loose:</p>\n<div class=\"codehilite\"><pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"n\">method_filename</span> <span class=\"o\">=</span> <span class=\"s\">&#39;{}_method.log&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s\">&#39; &#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;_&#39;</span><span class=\"p\">))</span>\n<span class=\"o\">---------------------------------------------------------------------------</span>\n<span class=\"ne\">UnicodeEncodeError</span>                        <span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">ipython</span><span class=\"o\">-</span><span class=\"nb\">input</span><span class=\"o\">-</span><span class=\"mi\">31</span><span class=\"o\">-</span><span class=\"n\">c5a4e402b551</span><span class=\"o\">&gt;</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span><span class=\"p\">()</span>\n<span class=\"o\">----&gt;</span> <span class=\"mi\">1</span> <span class=\"n\">method_filename</span> <span class=\"o\">=</span> <span class=\"s\">&#39;{}_method.log&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s\">&#39; &#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;_&#39;</span><span class=\"p\">))</span>\n\n<span class=\"ne\">UnicodeEncodeError</span><span class=\"p\">:</span> <span class=\"s\">&#39;ascii&#39;</span> <span class=\"n\">codec</span> <span class=\"n\">can</span><span class=\"s\">&#39;t encode character u&#39;</span>\\<span class=\"n\">xef</span><span class=\"s\">&#39; in position 2: ordinal not in range(128)</span>\n</pre></div>\n\n\n<p>At this point, we have a couple of options: ignore-and-remove the problematic character or\ntry to somehow convert it to an approximate representation that is part of the\nASCII character set. Let's explore the former option first:</p>\n<div class=\"codehilite\"><pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"s\">&#39;{}_method.log&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s\">&#39; &#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;_&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s\">&#39;ascii&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;ignore&#39;</span><span class=\"p\">))</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"s\">&#39;Nave_Bayes_method.log&#39;</span>\n</pre></div>\n\n\n<p>Fair enough, it works and we get what we pay for it, but surely we could do better,\nright?</p>\n<p>Alternatively, if we're happy with non-ASCII file names occupying our file system, we\ncould just do:</p>\n<div class=\"codehilite\"><pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"n\">method_filename</span> <span class=\"o\">=</span> <span class=\"s\">u&#39;{}_method.log&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s\">&#39; &#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;_&#39;</span><span class=\"p\">))</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span> <span class=\"n\">method_filename</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span> <span class=\"s\">u&#39;Na</span><span class=\"se\">\\xc3\\xaf</span><span class=\"s\">ve_Bayes_method.log&#39;</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]:</span> <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">method_filename</span><span class=\"p\">)</span>\n<span class=\"n\">Na</span><span class=\"err\">\u00ef</span><span class=\"n\">ve_Bayes_method</span><span class=\"o\">.</span><span class=\"n\">log</span>\n</pre></div>\n\n\n<p>However, that's not really the point of this exercise. Let's see if we could do even better.</p>\n<div class=\"codehilite\"><pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">unicodedata</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]:</span> <span class=\"n\">method_filename</span> <span class=\"o\">=</span> <span class=\"s\">&#39;{}_method.log&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"n\">unicodedata</span><span class=\"o\">.</span><span class=\"n\">normalize</span><span class=\"p\">(</span>\n                <span class=\"s\">&#39;NFKD&#39;</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s\">&#39; &#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;_&#39;</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span>\n                     <span class=\"s\">&#39;ascii&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;ignore&#39;</span><span class=\"p\">))</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]:</span> <span class=\"n\">method_filename</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]:</span> <span class=\"s\">&#39;Naive_Bayes_method.log&#39;</span>\n</pre></div>\n\n\n<p>This is where the <a href=\"https://docs.python.org/2/library/unicodedata.html\"><code>unicodedata</code></a> module from the Python Standard\nLibrary comes to the rescue. In this case, either of the <code>NFD</code> or <code>NFKD</code> normalizations would work, as\ndescribed in the documentation:</p>\n<blockquote>\n<p>[Canonical decomposition] translates each character into its decomposed form.</p>\n</blockquote>\n<p>This is exactly what we needed, wasn't it? An equivalent ASCII representation of our fancy\nML method names.</p>\n<p>Finally, I would like to give credit to a StackOverflow <a href=\"https://stackoverflow.com/a/7782177\">answer</a>, from which I\nlearned about the <code>unicodedata.normalize</code> functionality that gave rise to the current post.</p>\n<p>Happy debugging of <code>UnicodeError</code>s, everybody :)</p>", 
    "content_ihtml": "<h1>Python and Unicode</h1>\n<p>Oh, my - If I had a nickel/five-pence every time I had to deal with various kinds\nof Unicode-related processing in Python ...</p>\n<p>Anyway, this brief note is for those of you who've ever run into a not-so-helpful error message, along the lines of the following:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\"><span style=\"color: #D2413A; font-weight: bold\">UnicodeEncodeError</span>: <span style=\"color: #BB4444\">&#39;ascii&#39;</span> codec can<span style=\"color: #BB4444\">&#39;t encode character u&#39;</span>\\xef<span style=\"color: #BB4444\">&#39; in position 2: ordinal not in range(128)</span>\n</pre></div>\n\n\n<p>I'd bet those of you who have used Python for a bit larger than trivial project have invariably encountered\nsome variety of it.</p>\n<p>Let's see how we could approach this issue in different ways. For this purse, I'll first go\nahead and  define a\nsimple use-case: we're experimenting with a given dataset and we want to run a number of\nMachine Learning methods against the dataset and output a nice log file with performance\nsummary and results for each method.</p>\n<p>As it turns out, not all ML method names were created equal, and for some of them\nwe need more characters than those defined in the basic ASCII table:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\">In [<span style=\"color: #666666\">1</span>]: method <span style=\"color: #666666\">=</span> <span style=\"color: #BB4444\">u&#39;Na\u00efve Bayes&#39;</span>\n\nIn [<span style=\"color: #666666\">2</span>]: method\nOut[<span style=\"color: #666666\">2</span>]: <span style=\"color: #BB4444\">u&#39;Na</span><span style=\"color: #BB6622; font-weight: bold\">\\xef</span><span style=\"color: #BB4444\">ve Bayes&#39;</span>\n</pre></div>\n\n\n<p>So far so good - Python has successfully been able to encode our special character\n<code>\u00ef</code> as <code>\\xef</code>. However, once we attempt to put that into a non-unicode string, all hell\nbreaks loose:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\">In [<span style=\"color: #666666\">3</span>]: method_filename <span style=\"color: #666666\">=</span> <span style=\"color: #BB4444\">&#39;{}_method.log&#39;</span><span style=\"color: #666666\">.</span>format(method<span style=\"color: #666666\">.</span>replace(<span style=\"color: #BB4444\">&#39; &#39;</span>, <span style=\"color: #BB4444\">&#39;_&#39;</span>))\n<span style=\"color: #666666\">---------------------------------------------------------------------------</span>\n<span style=\"color: #D2413A; font-weight: bold\">UnicodeEncodeError</span>                        Traceback (most recent call last)\n<span style=\"color: #666666\">&lt;</span>ipython<span style=\"color: #666666\">-</span><span style=\"color: #AA22FF\">input</span><span style=\"color: #666666\">-31-</span>c5a4e402b551<span style=\"color: #666666\">&gt;</span> <span style=\"color: #AA22FF; font-weight: bold\">in</span> <span style=\"color: #666666\">&lt;</span>module<span style=\"color: #666666\">&gt;</span>()\n<span style=\"color: #666666\">----&gt;</span> <span style=\"color: #666666\">1</span> method_filename <span style=\"color: #666666\">=</span> <span style=\"color: #BB4444\">&#39;{}_method.log&#39;</span><span style=\"color: #666666\">.</span>format(method<span style=\"color: #666666\">.</span>replace(<span style=\"color: #BB4444\">&#39; &#39;</span>, <span style=\"color: #BB4444\">&#39;_&#39;</span>))\n\n<span style=\"color: #D2413A; font-weight: bold\">UnicodeEncodeError</span>: <span style=\"color: #BB4444\">&#39;ascii&#39;</span> codec can<span style=\"color: #BB4444\">&#39;t encode character u&#39;</span>\\xef<span style=\"color: #BB4444\">&#39; in position 2: ordinal not in range(128)</span>\n</pre></div>\n\n\n<p>At this point, we have a couple of options: ignore-and-remove the problematic character or\ntry to somehow convert it to an approximate representation that is part of the\nASCII character set. Let's explore the former option first:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\">In [<span style=\"color: #666666\">4</span>]: <span style=\"color: #BB4444\">&#39;{}_method.log&#39;</span><span style=\"color: #666666\">.</span>format(method<span style=\"color: #666666\">.</span>replace(<span style=\"color: #BB4444\">&#39; &#39;</span>, <span style=\"color: #BB4444\">&#39;_&#39;</span>)<span style=\"color: #666666\">.</span>encode(<span style=\"color: #BB4444\">&#39;ascii&#39;</span>, <span style=\"color: #BB4444\">&#39;ignore&#39;</span>))\nOut[<span style=\"color: #666666\">4</span>]: <span style=\"color: #BB4444\">&#39;Nave_Bayes_method.log&#39;</span>\n</pre></div>\n\n\n<p>Fair enough, it works and we get what we pay for it, but surely we could do better,\nright?</p>\n<p>Alternatively, if we're happy with non-ASCII file names occupying our file system, we\ncould just do:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\">In [<span style=\"color: #666666\">5</span>]: method_filename <span style=\"color: #666666\">=</span> <span style=\"color: #BB4444\">u&#39;{}_method.log&#39;</span><span style=\"color: #666666\">.</span>format(method<span style=\"color: #666666\">.</span>replace(<span style=\"color: #BB4444\">&#39; &#39;</span>, <span style=\"color: #BB4444\">&#39;_&#39;</span>))\n\nIn [<span style=\"color: #666666\">6</span>]: method_filename\nOut[<span style=\"color: #666666\">6</span>]: <span style=\"color: #BB4444\">u&#39;Na</span><span style=\"color: #BB6622; font-weight: bold\">\\xc3\\xaf</span><span style=\"color: #BB4444\">ve_Bayes_method.log&#39;</span>\n\nIn [<span style=\"color: #666666\">7</span>]: <span style=\"color: #AA22FF; font-weight: bold\">print</span>(method_filename)\nNa<span style=\"border: 1px solid #FF0000\">\u00ef</span>ve_Bayes_method<span style=\"color: #666666\">.</span>log\n</pre></div>\n\n\n<p>However, that's not really the point of this exercise. Let's see if we could do even better.</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\">In [<span style=\"color: #666666\">8</span>]: <span style=\"color: #AA22FF; font-weight: bold\">import</span> <span style=\"color: #0000FF; font-weight: bold\">unicodedata</span>\n\nIn [<span style=\"color: #666666\">9</span>]: method_filename <span style=\"color: #666666\">=</span> <span style=\"color: #BB4444\">&#39;{}_method.log&#39;</span><span style=\"color: #666666\">.</span>format(\n            unicodedata<span style=\"color: #666666\">.</span>normalize(\n                <span style=\"color: #BB4444\">&#39;NFKD&#39;</span>, method<span style=\"color: #666666\">.</span>replace(<span style=\"color: #BB4444\">&#39; &#39;</span>, <span style=\"color: #BB4444\">&#39;_&#39;</span>))<span style=\"color: #666666\">.</span>encode(\n                     <span style=\"color: #BB4444\">&#39;ascii&#39;</span>, <span style=\"color: #BB4444\">&#39;ignore&#39;</span>))\n\nIn [<span style=\"color: #666666\">10</span>]: method_filename\nOut[<span style=\"color: #666666\">10</span>]: <span style=\"color: #BB4444\">&#39;Naive_Bayes_method.log&#39;</span>\n</pre></div>\n\n\n<p>This is where the <a href=\"https://docs.python.org/2/library/unicodedata.html\"><code>unicodedata</code></a> module from the Python Standard\nLibrary comes to the rescue. In this case, either of the <code>NFD</code> or <code>NFKD</code> normalizations would work, as\ndescribed in the documentation:</p>\n<blockquote>\n<p>[Canonical decomposition] translates each character into its decomposed form.</p>\n</blockquote>\n<p>This is exactly what we needed, wasn't it? An equivalent ASCII representation of our fancy\nML method names.</p>\n<p>Finally, I would like to give credit to a StackOverflow <a href=\"https://stackoverflow.com/a/7782177\">answer</a>, from which I\nlearned about the <code>unicodedata.normalize</code> functionality that gave rise to the current post.</p>\n<p>Happy debugging of <code>UnicodeError</code>s, everybody :)</p>", 
    "part_idx": 1
  }
]