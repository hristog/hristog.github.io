[
  {
    "content": "\n# `%xx`-escapes\n\nHave you ever come across those strange looking `%xx`-escapes, that are used\nin URLs. Yes, I don't like them either ...\n\nI can imagine a class of use cases where such kind of escape characters may\nneed to be handled: say, you'd like to annotate - in a local or remote document - a number of URLs, with a given substring (of the URL itself).\n\nLet's look at the case where the cardinality of our URLs set is unity:\n```ipython\nIn [1]: url\nOut[1]: 'https://www.a-random-ml-website.com/na%C3%AFve-bayes'\n```\n\nSince I don't suppose any of you would be particularly keen on annotating this URL with\n`na\\xc3\\xafve-bayes`, we'll have to resort to utility functions provided by [`urllib2`][urllib2_module][^python_version]:\n\n[^python_version]: The Python version associated with the code examples from this post is `Python 2.7.12`.\n\n```ipython\nIn [2]: import urllib2\n\nIn [3]: urllib2.unquote(url)\nOut[3]: 'https://www.a-random-ml-website.com/na\\xc3\\xafve-bayes'\n```\n\nUgh. We've suddenly time-travelled back to [a few days ago][unicode_representations]!\nLuckily enough, our memories of the previous timeline branch have been preserved intact -\nwe are empowered with the knowledge of the `unicodedata` module:\n\n```ipython\nIn [4]: url = urllib2.unquote(url).decode('utf8')\n\nIn [5]: url\nOut[5]: u'https://www.a-random-ml-website.com/na\\xefve-bayes'\n\nIn [6]: import unicodedata\n\nIn [7]: better_looking_url = unicodedata.normalize('NFKD', url).encode('ascii', 'ignore')\n\nIn [8]: better_looking_url\nOut[8]: 'https://www.a-random-ml-website.com/naive-bayes'\n\n```\n\nNow, you can slice and dice `better_looking_url` as you please, for your annotation purposes.\n\n[unicode_representations]: /converting_unicode_representations_to_ascii_in_python.html\n[urllib2_module]: https://docs.python.org/2/library/urllib2.html\n", 
    "content_html": "<h1><code>%xx</code>-escapes</h1>\n<p>Have you ever come across those strange looking <code>%xx</code>-escapes, that are used\nin URLs. Yes, I don't like them either ...</p>\n<p>I can imagine a class of use cases where such kind of escape characters may\nneed to be handled: say, you'd like to annotate - in a local or remote document - a number of URLs, with a given substring (of the URL itself).</p>\n<p>Let's look at the case where the cardinality of our URLs set is unity:</p>\n<div class=\"codehilite\"><pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"n\">url</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"s\">&#39;https://www.a-random-ml-website.com/na%C3%AFve-bayes&#39;</span>\n</pre></div>\n\n\n<p>Since I don't suppose any of you would be particularly keen on annotating this URL with\n<code>na\\xc3\\xafve-bayes</code>, we'll have to resort to utility functions provided by <a href=\"https://docs.python.org/2/library/urllib2.html\"><code>urllib2</code></a><sup id=\"fnref:python_version\"><a class=\"footnote-ref\" href=\"#fn:python_version\" rel=\"footnote\">1</a></sup>:</p>\n<div class=\"codehilite\"><pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">urllib2</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"n\">urllib2</span><span class=\"o\">.</span><span class=\"n\">unquote</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"s\">&#39;https://www.a-random-ml-website.com/na</span><span class=\"se\">\\xc3\\xaf</span><span class=\"s\">ve-bayes&#39;</span>\n</pre></div>\n\n\n<p>Ugh. We've suddenly time-travelled back to <a href=\"/converting_unicode_representations_to_ascii_in_python.html\">a few days ago</a>!\nLuckily enough, our memories of the previous timeline branch have been preserved intact -\nwe are empowered with the knowledge of the <code>unicodedata</code> module:</p>\n<div class=\"codehilite\"><pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">urllib2</span><span class=\"o\">.</span><span class=\"n\">unquote</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s\">&#39;utf8&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"n\">url</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"s\">u&#39;https://www.a-random-ml-website.com/na</span><span class=\"se\">\\xef</span><span class=\"s\">ve-bayes&#39;</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">unicodedata</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]:</span> <span class=\"n\">better_looking_url</span> <span class=\"o\">=</span> <span class=\"n\">unicodedata</span><span class=\"o\">.</span><span class=\"n\">normalize</span><span class=\"p\">(</span><span class=\"s\">&#39;NFKD&#39;</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s\">&#39;ascii&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;ignore&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]:</span> <span class=\"n\">better_looking_url</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]:</span> <span class=\"s\">&#39;https://www.a-random-ml-website.com/naive-bayes&#39;</span>\n</pre></div>\n\n\n<p>Now, you can slice and dice <code>better_looking_url</code> as you please, for your annotation purposes.</p>\n<div class=\"footnote\">\n<hr />\n<ol>\n<li id=\"fn:python_version\">\n<p>The Python version associated with the code examples from this post is <code>Python 2.7.12</code>.&#160;<a class=\"footnote-backref\" href=\"#fnref:python_version\" rev=\"footnote\" title=\"Jump back to footnote 1 in the text\">&#8617;</a></p>\n</li>\n</ol>\n</div>", 
    "content_ihtml": "<h1><code>%xx</code>-escapes</h1>\n<p>Have you ever come across those strange looking <code>%xx</code>-escapes, that are used\nin URLs. Yes, I don't like them either ...</p>\n<p>I can imagine a class of use cases where such kind of escape characters may\nneed to be handled: say, you'd like to annotate - in a local or remote document - a number of URLs, with a given substring (of the URL itself).</p>\n<p>Let's look at the case where the cardinality of our URLs set is unity:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\">In [<span style=\"color: #666666\">1</span>]: url\nOut[<span style=\"color: #666666\">1</span>]: <span style=\"color: #BB4444\">&#39;https://www.a-random-ml-website.com/na%C3%AFve-bayes&#39;</span>\n</pre></div>\n\n\n<p>Since I don't suppose any of you would be particularly keen on annotating this URL with\n<code>na\\xc3\\xafve-bayes</code>, we'll have to resort to utility functions provided by <a href=\"https://docs.python.org/2/library/urllib2.html\"><code>urllib2</code></a><sup id=\"fnref:python_version\"><a class=\"footnote-ref\" href=\"https://hristog.github.io/unquoting_url_escape_characters_using_python.html#fn:python_version\" rel=\"footnote\">1</a></sup>:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\">In [<span style=\"color: #666666\">2</span>]: <span style=\"color: #AA22FF; font-weight: bold\">import</span> <span style=\"color: #0000FF; font-weight: bold\">urllib2</span>\n\nIn [<span style=\"color: #666666\">3</span>]: urllib2<span style=\"color: #666666\">.</span>unquote(url)\nOut[<span style=\"color: #666666\">3</span>]: <span style=\"color: #BB4444\">&#39;https://www.a-random-ml-website.com/na</span><span style=\"color: #BB6622; font-weight: bold\">\\xc3\\xaf</span><span style=\"color: #BB4444\">ve-bayes&#39;</span>\n</pre></div>\n\n\n<p>Ugh. We've suddenly time-travelled back to <a href=\"https://hristog.github.io/converting_unicode_representations_to_ascii_in_python.html\">a few days ago</a>!\nLuckily enough, our memories of the previous timeline branch have been preserved intact -\nwe are empowered with the knowledge of the <code>unicodedata</code> module:</p>\n<div class=\"codehilite\" style=\"background: #f8f8f8\"><pre style=\"line-height: 125%\">In [<span style=\"color: #666666\">4</span>]: url <span style=\"color: #666666\">=</span> urllib2<span style=\"color: #666666\">.</span>unquote(url)<span style=\"color: #666666\">.</span>decode(<span style=\"color: #BB4444\">&#39;utf8&#39;</span>)\n\nIn [<span style=\"color: #666666\">5</span>]: url\nOut[<span style=\"color: #666666\">5</span>]: <span style=\"color: #BB4444\">u&#39;https://www.a-random-ml-website.com/na</span><span style=\"color: #BB6622; font-weight: bold\">\\xef</span><span style=\"color: #BB4444\">ve-bayes&#39;</span>\n\nIn [<span style=\"color: #666666\">6</span>]: <span style=\"color: #AA22FF; font-weight: bold\">import</span> <span style=\"color: #0000FF; font-weight: bold\">unicodedata</span>\n\nIn [<span style=\"color: #666666\">7</span>]: better_looking_url <span style=\"color: #666666\">=</span> unicodedata<span style=\"color: #666666\">.</span>normalize(<span style=\"color: #BB4444\">&#39;NFKD&#39;</span>, url)<span style=\"color: #666666\">.</span>encode(<span style=\"color: #BB4444\">&#39;ascii&#39;</span>, <span style=\"color: #BB4444\">&#39;ignore&#39;</span>)\n\nIn [<span style=\"color: #666666\">8</span>]: better_looking_url\nOut[<span style=\"color: #666666\">8</span>]: <span style=\"color: #BB4444\">&#39;https://www.a-random-ml-website.com/naive-bayes&#39;</span>\n</pre></div>\n\n\n<p>Now, you can slice and dice <code>better_looking_url</code> as you please, for your annotation purposes.</p>\n<div class=\"footnote\">\n<hr />\n<ol>\n<li id=\"fn:python_version\">\n<p>The Python version associated with the code examples from this post is <code>Python 2.7.12</code>.&#160;<a class=\"footnote-backref\" href=\"https://hristog.github.io/unquoting_url_escape_characters_using_python.html#fnref:python_version\" rev=\"footnote\" title=\"Jump back to footnote 1 in the text\">&#8617;</a></p>\n</li>\n</ol>\n</div>", 
    "part_idx": 1
  }
]