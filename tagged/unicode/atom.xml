<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/" xml:lang="en">
  <id>https://hristog.github.io/tagged/unicode/</id>
  <title type="text">Conscious Automaton - unicode</title>
  <subtitle type="text">&gt;&gt;&gt; from hristog.thoughts import random</subtitle>
  <link rel="alternate" type="text/html" href="https://hristog.github.io/tagged/unicode/" />
  <link rel="self" type="application/atom+xml" href="https://hristog.github.io/tagged/unicode/atom.xml" />
  <updated>2018-04-02T21:37:02Z</updated>
  <sy:updatePeriod>hourly</sy:updatePeriod>
  <sy:updateFrequency>1</sy:updateFrequency>

  <rights type="html">&amp;copy; 2017 &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/4.0/&quot;&gt;&lt;img height=&quot;14&quot; src=&quot;/img/by-sa.png&quot; /&gt;&lt;/a&gt;</rights>
  <generator uri="https://github.com/mahmoud/chert">Chert 0.1</generator>
  
  <entry>
    <id>https://hristog.github.io/unquoting_url_escape_characters_using_python.html</id>
    <author>
      <name>Hristo</name>
      <uri>https://hristog.github.io/</uri>
    </author>
    <title>Unquoting URL escape characters using Python</title>
    <link rel="alternate" type="text/html" href="https://hristog.github.io/unquoting_url_escape_characters_using_python.html" />
    <published>2017-11-05T00:00:00Z</published>
    <updated>2017-11-05T00:00:00Z</updated>
    <category term="python"/><category term="python-v2"/><category term="unicode"/><category term="text-processing"/>
    

    <content type="html">&lt;p&gt;&lt;h2 id=&quot;xx_escapes&quot;&gt;&lt;a class=&quot;toclink&quot; href=&quot;https://hristog.github.io/unquoting_url_escape_characters_using_python.html#xx_escapes&quot;&gt;&lt;code&gt;%xx&lt;/code&gt;-escapes&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Have you ever come across those strange looking &lt;code&gt;%xx&lt;/code&gt;-escapes, that are used
in URLs. Yes, I don't like them either ...&lt;/p&gt;
&lt;p&gt;I can imagine a class of use cases where such kind of escape characters may
need to be handled: say, you'd like to annotate - in a local or remote document - a number of URLs, with a given substring (of the URL itself).&lt;/p&gt;
&lt;p&gt;Let's look at the case where the cardinality of our URLs set is unity:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; style=&quot;background: #f8f8f8&quot;&gt;&lt;pre style=&quot;line-height: 125%&quot;&gt;&lt;span style=&quot;color: #008800; font-style: italic&quot;&gt;# Python 2.7.12&lt;/span&gt;
In [&lt;span style=&quot;color: #666666&quot;&gt;1&lt;/span&gt;]: url
Out[&lt;span style=&quot;color: #666666&quot;&gt;1&lt;/span&gt;]: &lt;span style=&quot;color: #BB4444&quot;&gt;'https://www.a-random-ml-website.com/na%C3%AFve-bayes'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since I don't suppose any of you would be particularly keen on annotating this URL with
&lt;code&gt;na\xc3\xafve-bayes&lt;/code&gt;, we'll have to resort to utility functions provided by &lt;a href=&quot;https://docs.python.org/2/library/urllib2.html&quot;&gt;&lt;code&gt;urllib2&lt;/code&gt;&lt;/a&gt;&lt;sup id=&quot;fnref:python_version&quot;&gt;&lt;a class=&quot;footnote-ref&quot; rel=&quot;footnote&quot; href=&quot;https://hristog.github.io/unquoting_url_escape_characters_using_python.html#fn:python_version&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; style=&quot;background: #f8f8f8&quot;&gt;&lt;pre style=&quot;line-height: 125%&quot;&gt;In [&lt;span style=&quot;color: #666666&quot;&gt;2&lt;/span&gt;]: &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;urllib2&lt;/span&gt;

In [&lt;span style=&quot;color: #666666&quot;&gt;3&lt;/span&gt;]: urllib2&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;unquote(url)
Out[&lt;span style=&quot;color: #666666&quot;&gt;3&lt;/span&gt;]: &lt;span style=&quot;color: #BB4444&quot;&gt;'https://www.a-random-ml-website.com/na&lt;/span&gt;&lt;span style=&quot;color: #BB6622; font-weight: bold&quot;&gt;\xc3\xaf&lt;/span&gt;&lt;span style=&quot;color: #BB4444&quot;&gt;ve-bayes'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ugh. We've suddenly time-travelled back to &lt;a href=&quot;https://hristog.github.io/converting_unicode_representations_to_ascii_in_python.html&quot;&gt;a few days ago&lt;/a&gt;!
Luckily enough, our memories of the previous timeline branch have been preserved intact -
we are empowered with the knowledge of the &lt;code&gt;unicodedata&lt;/code&gt; module:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; style=&quot;background: #f8f8f8&quot;&gt;&lt;pre style=&quot;line-height: 125%&quot;&gt;In [&lt;span style=&quot;color: #666666&quot;&gt;4&lt;/span&gt;]: url &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; urllib2&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;unquote(url)&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;decode(&lt;span style=&quot;color: #BB4444&quot;&gt;'utf8'&lt;/span&gt;)

In [&lt;span style=&quot;color: #666666&quot;&gt;5&lt;/span&gt;]: url
Out[&lt;span style=&quot;color: #666666&quot;&gt;5&lt;/span&gt;]: &lt;span style=&quot;color: #BB4444&quot;&gt;u'https://www.a-random-ml-website.com/na&lt;/span&gt;&lt;span style=&quot;color: #BB6622; font-weight: bold&quot;&gt;\xef&lt;/span&gt;&lt;span style=&quot;color: #BB4444&quot;&gt;ve-bayes'&lt;/span&gt;

In [&lt;span style=&quot;color: #666666&quot;&gt;6&lt;/span&gt;]: &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;unicodedata&lt;/span&gt;

In [&lt;span style=&quot;color: #666666&quot;&gt;7&lt;/span&gt;]: better_looking_url &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; unicodedata&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;normalize(&lt;span style=&quot;color: #BB4444&quot;&gt;'NFKD'&lt;/span&gt;, url)&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;encode(&lt;span style=&quot;color: #BB4444&quot;&gt;'ascii'&lt;/span&gt;, &lt;span style=&quot;color: #BB4444&quot;&gt;'ignore'&lt;/span&gt;)

In [&lt;span style=&quot;color: #666666&quot;&gt;8&lt;/span&gt;]: better_looking_url
Out[&lt;span style=&quot;color: #666666&quot;&gt;8&lt;/span&gt;]: &lt;span style=&quot;color: #BB4444&quot;&gt;'https://www.a-random-ml-website.com/naive-bayes'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, you can slice and dice &lt;code&gt;better_looking_url&lt;/code&gt; as you please, for your annotation purposes.&lt;/p&gt;
&lt;div class=&quot;footnote&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:python_version&quot;&gt;
&lt;p&gt;The Python version associated with the code examples from this post is &lt;code&gt;Python 2.7.12&lt;/code&gt;. &lt;a title=&quot;Jump back to footnote 1 in the text&quot; class=&quot;footnote-backref&quot; href=&quot;https://hristog.github.io/unquoting_url_escape_characters_using_python.html#fnref:python_version&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;p&gt;&lt;/p&gt;



&lt;hr /&gt;

</content>

  </entry>
  
  <entry>
    <id>https://hristog.github.io/converting_unicode_representations_to_ascii_in_python.html</id>
    <author>
      <name>Hristo</name>
      <uri>https://hristog.github.io/</uri>
    </author>
    <title>Converting Unicode representations to ASCII in Python</title>
    <link rel="alternate" type="text/html" href="https://hristog.github.io/converting_unicode_representations_to_ascii_in_python.html" />
    <published>2017-10-28T23:00:00Z</published>
    <updated>2017-10-28T23:00:00Z</updated>
    <category term="python"/><category term="python-v2"/><category term="unicode"/><category term="text-processing"/>
    

    <content type="html">&lt;p&gt;&lt;h2 id=&quot;python_and_unicode&quot;&gt;&lt;a class=&quot;toclink&quot; href=&quot;https://hristog.github.io/converting_unicode_representations_to_ascii_in_python.html#python_and_unicode&quot;&gt;Python and Unicode&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Oh, my - If I had a nickel/five-pence every time I had to deal with various kinds
of Unicode-related processing in Python ...&lt;/p&gt;
&lt;p&gt;Anyway, this brief note is for those of you who've ever run into a not-so-helpful error message, along the lines of the following:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; style=&quot;background: #f8f8f8&quot;&gt;&lt;pre style=&quot;line-height: 125%&quot;&gt;&lt;span style=&quot;color: #D2413A; font-weight: bold&quot;&gt;UnicodeEncodeError&lt;/span&gt;: &lt;span style=&quot;color: #BB4444&quot;&gt;'ascii'&lt;/span&gt; codec can&lt;span style=&quot;color: #BB4444&quot;&gt;'t encode character u'&lt;/span&gt;\xef&lt;span style=&quot;color: #BB4444&quot;&gt;' in position 2: ordinal not in range(128)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I'd bet those of you who have used Python for a bit larger than trivial project have invariably &lt;a href=&quot;https://duckduckgo.com/?q=Python+UnicodeEncodeError&quot;&gt;encountered&lt;/a&gt;
some variety of it.&lt;/p&gt;
&lt;p&gt;Let's see how we could approach this issue&lt;sup id=&quot;fnref:python_version&quot;&gt;&lt;a class=&quot;footnote-ref&quot; rel=&quot;footnote&quot; href=&quot;https://hristog.github.io/converting_unicode_representations_to_ascii_in_python.html#fn:python_version&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; in different ways. For this purse, I'll first go
ahead and  define a
simple use-case: we're experimenting with a given dataset and we want to run a number of
Machine Learning methods against the dataset and output a nice log file with performance
summary and results for each method.&lt;/p&gt;
&lt;p&gt;As it turns out, not all ML method names were created equal, and for some of them
we need more characters than those defined in the basic ASCII table:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; style=&quot;background: #f8f8f8&quot;&gt;&lt;pre style=&quot;line-height: 125%&quot;&gt;&lt;span style=&quot;color: #008800; font-style: italic&quot;&gt;# Python 2.7.12&lt;/span&gt;
In [&lt;span style=&quot;color: #666666&quot;&gt;1&lt;/span&gt;]: method &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #BB4444&quot;&gt;u'Naïve Bayes'&lt;/span&gt;

In [&lt;span style=&quot;color: #666666&quot;&gt;2&lt;/span&gt;]: method
Out[&lt;span style=&quot;color: #666666&quot;&gt;2&lt;/span&gt;]: &lt;span style=&quot;color: #BB4444&quot;&gt;u'Na&lt;/span&gt;&lt;span style=&quot;color: #BB6622; font-weight: bold&quot;&gt;\xef&lt;/span&gt;&lt;span style=&quot;color: #BB4444&quot;&gt;ve Bayes'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So far so good - Python has successfully been able to encode our special character
&lt;code&gt;ï&lt;/code&gt; as &lt;code&gt;\xef&lt;/code&gt;. However, once we attempt to put that into a non-unicode string, all hell
breaks loose:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; style=&quot;background: #f8f8f8&quot;&gt;&lt;pre style=&quot;line-height: 125%&quot;&gt;In [&lt;span style=&quot;color: #666666&quot;&gt;3&lt;/span&gt;]: method_filename &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #BB4444&quot;&gt;'{}_method.log'&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;format(method&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;replace(&lt;span style=&quot;color: #BB4444&quot;&gt;' '&lt;/span&gt;, &lt;span style=&quot;color: #BB4444&quot;&gt;'_'&lt;/span&gt;))
&lt;span style=&quot;color: #666666&quot;&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&quot;color: #D2413A; font-weight: bold&quot;&gt;UnicodeEncodeError&lt;/span&gt;                        Traceback (most recent call last)
&lt;span style=&quot;color: #666666&quot;&gt;&amp;lt;&lt;/span&gt;ipython&lt;span style=&quot;color: #666666&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #AA22FF&quot;&gt;input&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;-31-&lt;/span&gt;c5a4e402b551&lt;span style=&quot;color: #666666&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;in&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;&amp;lt;&lt;/span&gt;module&lt;span style=&quot;color: #666666&quot;&gt;&amp;gt;&lt;/span&gt;()
&lt;span style=&quot;color: #666666&quot;&gt;----&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;1&lt;/span&gt; method_filename &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #BB4444&quot;&gt;'{}_method.log'&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;format(method&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;replace(&lt;span style=&quot;color: #BB4444&quot;&gt;' '&lt;/span&gt;, &lt;span style=&quot;color: #BB4444&quot;&gt;'_'&lt;/span&gt;))

&lt;span style=&quot;color: #D2413A; font-weight: bold&quot;&gt;UnicodeEncodeError&lt;/span&gt;: &lt;span style=&quot;color: #BB4444&quot;&gt;'ascii'&lt;/span&gt; codec can&lt;span style=&quot;color: #BB4444&quot;&gt;'t encode character u'&lt;/span&gt;\xef&lt;span style=&quot;color: #BB4444&quot;&gt;' in position 2: ordinal not in range(128)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point, we have a couple of options: ignore-and-remove the problematic character or
try to somehow convert it to an approximate representation that is part of the
ASCII character set. Let's explore the former option first:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; style=&quot;background: #f8f8f8&quot;&gt;&lt;pre style=&quot;line-height: 125%&quot;&gt;In [&lt;span style=&quot;color: #666666&quot;&gt;4&lt;/span&gt;]: &lt;span style=&quot;color: #BB4444&quot;&gt;'{}_method.log'&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;format(method&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;replace(&lt;span style=&quot;color: #BB4444&quot;&gt;' '&lt;/span&gt;, &lt;span style=&quot;color: #BB4444&quot;&gt;'_'&lt;/span&gt;)&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;encode(&lt;span style=&quot;color: #BB4444&quot;&gt;'ascii'&lt;/span&gt;, &lt;span style=&quot;color: #BB4444&quot;&gt;'ignore'&lt;/span&gt;))
Out[&lt;span style=&quot;color: #666666&quot;&gt;4&lt;/span&gt;]: &lt;span style=&quot;color: #BB4444&quot;&gt;'Nave_Bayes_method.log'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Fair enough, it works and we get what we pay for it, but surely we could do better,
right?&lt;/p&gt;
&lt;p&gt;Alternatively, if we're happy with non-ASCII file names occupying our file system, we
could just do:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; style=&quot;background: #f8f8f8&quot;&gt;&lt;pre style=&quot;line-height: 125%&quot;&gt;In [&lt;span style=&quot;color: #666666&quot;&gt;5&lt;/span&gt;]: method_filename &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #BB4444&quot;&gt;u'{}_method.log'&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;format(method&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;replace(&lt;span style=&quot;color: #BB4444&quot;&gt;' '&lt;/span&gt;, &lt;span style=&quot;color: #BB4444&quot;&gt;'_'&lt;/span&gt;))

In [&lt;span style=&quot;color: #666666&quot;&gt;6&lt;/span&gt;]: method_filename
Out[&lt;span style=&quot;color: #666666&quot;&gt;6&lt;/span&gt;]: &lt;span style=&quot;color: #BB4444&quot;&gt;u'Na&lt;/span&gt;&lt;span style=&quot;color: #BB6622; font-weight: bold&quot;&gt;\xc3\xaf&lt;/span&gt;&lt;span style=&quot;color: #BB4444&quot;&gt;ve_Bayes_method.log'&lt;/span&gt;

In [&lt;span style=&quot;color: #666666&quot;&gt;7&lt;/span&gt;]: &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;print&lt;/span&gt;(method_filename)
Na&lt;span style=&quot;border: 1px solid #FF0000&quot;&gt;ï&lt;/span&gt;ve_Bayes_method&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;log
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, that's not really the point of this exercise. Let's see if we could do even better.&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; style=&quot;background: #f8f8f8&quot;&gt;&lt;pre style=&quot;line-height: 125%&quot;&gt;In [&lt;span style=&quot;color: #666666&quot;&gt;8&lt;/span&gt;]: &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;unicodedata&lt;/span&gt;

In [&lt;span style=&quot;color: #666666&quot;&gt;9&lt;/span&gt;]: method_filename &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #BB4444&quot;&gt;'{}_method.log'&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;format(
            unicodedata&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;normalize(
                &lt;span style=&quot;color: #BB4444&quot;&gt;'NFKD'&lt;/span&gt;, method&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;replace(&lt;span style=&quot;color: #BB4444&quot;&gt;' '&lt;/span&gt;, &lt;span style=&quot;color: #BB4444&quot;&gt;'_'&lt;/span&gt;))&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;encode(
                     &lt;span style=&quot;color: #BB4444&quot;&gt;'ascii'&lt;/span&gt;, &lt;span style=&quot;color: #BB4444&quot;&gt;'ignore'&lt;/span&gt;))

In [&lt;span style=&quot;color: #666666&quot;&gt;10&lt;/span&gt;]: method_filename
Out[&lt;span style=&quot;color: #666666&quot;&gt;10&lt;/span&gt;]: &lt;span style=&quot;color: #BB4444&quot;&gt;'Naive_Bayes_method.log'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is where the &lt;a href=&quot;https://docs.python.org/2/library/unicodedata.html&quot;&gt;&lt;code&gt;unicodedata&lt;/code&gt;&lt;/a&gt; module from the Python Standard
Library comes to the rescue. In this case, either of the &lt;code&gt;NFD&lt;/code&gt; or &lt;code&gt;NFKD&lt;/code&gt; normalizations would work, as
described in the documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[Canonical decomposition] translates each character into its decomposed form.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is exactly what we needed, wasn't it? An equivalent ASCII representation of our fancy
ML method names.&lt;/p&gt;
&lt;p&gt;Finally, I would like to give credit to a StackOverflow &lt;a href=&quot;https://stackoverflow.com/a/7782177&quot;&gt;answer&lt;/a&gt;, from which I
learned about the &lt;code&gt;unicodedata.normalize&lt;/code&gt; functionality that gave rise to the current post.&lt;/p&gt;
&lt;p&gt;Happy debugging of &lt;code&gt;UnicodeError&lt;/code&gt;s, everybody :)&lt;/p&gt;
&lt;div class=&quot;footnote&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:python_version&quot;&gt;
&lt;p&gt;Please, note that the code examples accompanying this post are
relevant to Python v2 - which has been labeled as &quot;Legacy Python&quot;, in the context of
the official community discontinuing its support in 2020 - and,
particularly, &lt;code&gt;Python 2.7.12&lt;/code&gt;. &lt;a title=&quot;Jump back to footnote 1 in the text&quot; class=&quot;footnote-backref&quot; href=&quot;https://hristog.github.io/converting_unicode_representations_to_ascii_in_python.html#fnref:python_version&quot; rev=&quot;footnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;p&gt;&lt;/p&gt;



&lt;hr /&gt;

</content>

  </entry>
  
</feed>
